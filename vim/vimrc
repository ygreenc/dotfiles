set nocompatible
filetype off

" Some functions
if filereadable(expand("~/.vim/functions"))
  source ~/.vim/functions
endif

" Bundles configurations
if filereadable(expand("~/.vim/plugins"))
  source ~/.vim/plugins
endif

" General Settings
filetype plugin indent on " Detect file types
syntax on                 " Syntax highlighting
set mouse=""              " I don't want no stinking mouse
scriptencoding utf-8      " Set encoding to utf-8

set history=1000          " Increase history size
set spell                 " Enable Spell-check
set hidden                " Enable buffer switch without saving
set iskeyword-=.          " '.' represents a word
set iskeyword-=#          " '#' represents a word
set iskeyword-=-          " '-' represents a word

set backspace=indent,eol,start  " What to delete on backspace
set linespace=0         " No extra space between rows
set nu              " Line numbering
set showmatch           " Show matching brackets/parenthesis
set incsearch           " Search as you type
set hlsearch            " Highlight search term
set winminheight=0      " Window can be any size
set ignorecase          " Default search is case-insensitive
set smartcase           " When uppercase detected, search case-sensitive
set wildmenu            " Display menu instead of auto-complete
set wildmode=list:longest,full  " Tab completion order
set whichwrap=b,s,h,l,<,>,[,]   " Cursor + backspace + default wrap
set scrolljump=5        " Jump 5 lines when cursor leave screen
set scrolloff=3         " Minimum lines above or below cursor
set foldenable          " Auto-fold

set list
set listchars=tab:>\ ,trail:â€¢,extends:#,nbsp:. " Replace special chars in list mode

" Formatting
set nowrap          " No line wrapping
set autoindent          " Indent according to previous line
set shiftwidth=4        " Use 4-spaces indent
set expandtab           " Tabs are spaces, No thank you tabs
set tabstop=4           " Indentation is 4 columns
set softtabstop=4       " Backspace delete indent
set nojoinspaces        " Don't include space after join
set splitright          " vsplit to the right of current
set splitbelow          " hsplit below current
set pastetoggle=<F12>       " Sane indentation on paste

" Remove trailing whitespace
autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> | call StripTrailingWhitespace()

" Markdown extension is .md
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Vim UI
set showmode            " Display active mode
set cursorline          " Highlight current line
colorscheme hybrid

if !has('gui_running')
  set t_Co=256
endif

"if has('statusline')
    "set laststatus=2

    "set statusline=%<%f\                        " Filename
    "set statusline+=%w%h%m%r                    " Options

    "set statusline+=\ [%{&ff}/%Y]               " Filetype
    "set statusline+=\ [%{getcwd()}]             " Current dir
    "set statusline+=%=%-14.(%l,%c%V%)\ %p%%     " Right-align nav infos
"endif

" Key mappings
let mapleader = ','

" Fix Shift mistakes
if has("users_commands")
    command! -bang -nargs=* -completefile E  e<bang> <args>
    command! -bang -nargs=* -completefile W  w<bang> <args>
    command! -bang -nargs=* -completefile Wq wq<bang> <args>
    command! -bang -nargs=* -completefile WQ QW<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q  q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

" Forgot sudo?
cmap w!! w !sudo tee % >/dev/null

" Edit mode helper
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e   %%
map <leader>es :sp  %%
map <leader>ev :vsp %%

" CtrlP Funky
nnoremap <Leader>fu :CtrlPFunky<Cr>
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr> " Narrow search to word under cursor

" NERDTree
map <C-e> <plug>NERDTreeTabsToggle<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

" Tagbar
nnoremap <silent> <leader>tt :TagbarToggle<Cr>

" UndoTree
nnoremap <Leader>u :UndotreeToggle<CR>

" Remap UltiSnips for compatibility with YouCompleteMe
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'


" If a .vimrc.local exists
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
